//==============================================================================FINALSD4
#define THI false
#include <SensirionI2CScd4x.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_SHT4x.h>
#include <esp_task_wdt.h>
#include <SPI.h>
#include <sps30.h>
#if THI
#include <WiFi.h>
#include <WiFiUdp.h>

#include <WiFiClientSecure.h>
#include <ThingsBoard.h>
#include <NTPClient.h>

#endif


//==============================================================================
#if THI
#define THINGSBOARD_MQTT_SERVER       "thingsboard.cloud"
#define THINGSBOARD_MQTT_ACESSTOKEN   "ZV5l5sPY7xWPwTo7VGzL"
#define THINGSBOARD_MQTT_PORT         1883
//==============================================================================
WiFiClient espClient;
ThingsBoard tb(espClient);
int status = WL_IDLE_STATUS;
#endif
//==============================================================================

SensirionI2CScd4x scd4x;                                                        //Class SCD40
Adafruit_SHT4x sht4 = Adafruit_SHT4x();


//==============================================================================
#define SP30_COMMS Wire
#define DEBUG 0                                                                 //0 : No messages, 1 : Request sending and receiving, 2 : Request sending and receiving + show protocol errors
#define SP30_ADDR 0x69                                                           //SPS30 I2C address
//==============================================================================
//0x62  SCD40   98  Decimal
//0x69  SPS30   105 Decimal
//0x44  SHT40   68  Decimal
//==============================================================================
#if THI 
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec      = 0;
const int   daylightOffset_sec = 0;
//==============================================================================
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);
//================================WI-FI==============================================
#define WIFISSID          "ces"                                             //WiFi SSID here
#define PASSWORD          "univerces"                                        //WiFi password here
// #define WIFISSID          "Familia Morales"                                            //WiFi SSID here
// #define PASSWORD          "2205631700"                                                    //WiFi password here
#endif
//==============================================================================
const uint32_t  READ_DELAY  = 2000;
static uint32_t msDelay     = millis();
const uint32_t  SENS_DELAY  = 50;
#define         WDT_TIMEOUT 70
//==============================================================================

bool      SPS30B;                                                               //Begin out
bool      SPS30P;                                                               //Probe out
bool      SPS30R;                                                               //Reset out
bool      SPS30I;                                                               //Start out
uint8_t   SPS30V;                                                               //Get values out
uint8_t   SPS30G;                                                               //Get status
//==============================================================================
bool    SD40E = false;                                                          //Begin out
bool    SHT40E = false;                                                          //Begin out
bool    SHT40V = false;                                                          //Data ready
//==============================================================================
int       i = 0;
struct    sps_values val;
float     SPS30_MCR[4];
float     SPS30_NPR[4];
float     SPS30_PSZ;
uint16_t  S4CO;
float    SD40[2];
float     SHT40[2];
float     input[1]={0};
//==============================================================================
bool I2C[128] = {};
byte error, address;
//==============================================================================
//Adafruit_NeoPixel intneo = Adafruit_NeoPixel(4, PIN_NEOPIXEL, NEO_GRB + NEO_KHZ800);
//ThinkInk_290_Grayscale4_T5 display(EPD_DC, EPD_RESET, EPD_CS, -1, -1);
//ThinkInk_290_Mono_M06 display(EPD_DC, EPD_RESET, EPD_CS, -1, -1);
//Adafruit_IL0373 display(104, 212, EPD_DC, EPD_RESET, EPD_CS, EPD_BUSY);
//==============================================================================
void setup()
{
//------------------------------------------------------------------------------
  Serial.begin(115200);
  Wire.begin();
//  Wire.setClock(100000);
  
//------------------------------------------------------------------------------ 
#if THI
  WiFi.begin(WIFISSID, PASSWORD);
//------------------------------------------------------------------------------
  while (WiFi.status() != WL_CONNECTED){Serial.print(".");delay(500);}
  Serial.println();
//------------------------------------------------------------------------------
  timeClient.begin();
  timeClient.setUpdateInterval(28800000);                                       //Milliseconds
  timeClient.update();
//------------------------------------------------------------------------------
#endif
  Serial.println("SYSTM_INI_OK");
//------------------------------------------------------------------------------
  for(address = 0; address < 128; address++ )
    {
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0) {I2C[address] = true;
                  Serial.println(address);
    }else            I2C[address] = false;
    }

// void loop(){
//   //Serial.println("loop");
//   for(address = 0; address < 128; address++ )
//     {
//     Wire.beginTransmission(address);
//     error = Wire.endTransmission();
    
//     if (error == 0) {I2C[address] = true;
//                   Serial.println(address);
//     }else            I2C[address] = false;
//     }
//   delay(1000);
// }
    
// //------------------------------------------------------------------------------
  if(I2C[62])  scd4x.begin(Wire);
  if(I2C[62])  SD40E = true;
  if(SD40E)     Serial.println("SCD40_INI_OK");
  else          Serial.println("SCD40_INI_ER"); 
  if(SD40E)     scd4x.stopPeriodicMeasurement();
  if(SD40E)     scd4x.startPeriodicMeasurement();
// //------------------------------------------------------------------------------
//   if(I2C[44])  SHT40E = sht4.begin();
//   if(SHT40E)     Serial.println("SHT40_INI_OK");
//   else          Serial.println("SHT40_INI_ER"); 
//   if(SHT40E)     sht4.setPrecision(SHT4X_HIGH_PRECISION);      
                       
// //------------------------------------------------------------------------------
// //   SGP40 = sgp.begin();
// //   if(SGP40)  Serial.println("SGP40_INI_OK");
// //   else       Serial.println("SGP40_INI_ER"); 
  
// //------------------------------------------------------------------------------

// //------------------------------------------------------------------------------
//   esp_task_wdt_init(WDT_TIMEOUT, true);                                         //Enable panic so ESP32 restarts
//   esp_task_wdt_add(NULL);                                                       //Add current thread to WDT watch
// //------------------------------------------------------------------------------
//   delay(200);
// //------------------------------------------------------------------------------  
// }
// //==============================================================================
// void loop()
// {
// //------------------------------------------------------------------------------
//   esp_task_wdt_reset();
// //------------------------------------------------------------------------------
//   char buff[100];

// //------------------------------------------------------------------------------
//   if(millis() - msDelay<READ_DELAY) return;
//   msDelay = millis();
// //------------------------------------------------------------------------------
//   //digitalWrite(LED_ADV, HIGH);
//   //intneo.fill(0x00FF);
//   //intneo.show();
// //------------------------------------------------------------------------------
// //   if(WiFi.status() != WL_CONNECTED)
// //     {
// //     reconnect();
// //     return;
// //     }
// // //------------------------------------------------------------------------------
//   if(SD40E) scd4x.readMeasurement(S4CO, SD40[0], SD40[1]);
//   if(SD40E) sprintf(buff, "[SCD40] TEM: %08.2f, HUM: %08.2f, CO2: %d", SD40[0], SD40[1], S4CO);
//   if(SD40E) Serial.println(buff);
//   delay(SENS_DELAY);
// //------------------------------------------------------------------------------
//   sensors_event_t humidity, temp;
//   sht4.getEvent(&humidity, &temp);// populate temp and humidity objects with fresh data
//   if(sht4.getEvent(&humidity, &temp) && SHT40E)   SHT40V = true;
//   else                                SHT40V = false;
//   if(SHT40V) SHT40[0] = temp.temperature;
//   if(SHT40V) SHT40[1] = humidity.relative_humidity/100.0;
//   if(SHT40V) sprintf(buff,"[SHT40] TEM: %08.2f, HUM: %08.2f", SHT40[0], SHT40[2]);
//   if(SHT40V) Serial.println(buff);
//   delay(SENS_DELAY);
// // //------------------------------------------------------------------------------ 
// //   uint16_t raw;
// //   raw = sgp.measureVocIndex();
// //   sprintf(buff,"[SGP40] VOC: %08.2f", raw);
// //   Serial.println(buff);
// //   delay(SENS_DELAY);

// // //------------------------------------------------------------------------------
//   // if(SPS30B)  SPS30V = sps30.GetValues(&val);
//   // delay(SENS_DELAY);
// //------------------------------------------------------------------------------
// // // Mass Concentration P1.0 P2.5 P4.0 P10
// //   if(SPS30V == ERR_OK) SPS30_MCR[0] = val.MassPM1;
// //   if(SPS30V == ERR_OK) SPS30_MCR[1] = val.MassPM2;
// //   if(SPS30V == ERR_OK) SPS30_MCR[2] = val.MassPM4;
// //   if(SPS30V == ERR_OK) SPS30_MCR[3] = val.MassPM10; 
// //------------------------------------------------------------------------------
//   // if(SPS30V == ERR_OK) sprintf(buff,"[SPS30] PM1: %08.2f, PM2: %08.2f, PM4: %08.2f, P10: %08.2f", SPS30_MCR[0], SPS30_MCR[1], SPS30_MCR[2], SPS30_MCR[3]);
//   // if(SPS30V == ERR_OK) Serial.println(buff);
//   // delay(SENS_DELAY);
// //------------------------------------------------------------------------------
// #if THI
//   if(!tb.connected())
//     {
//     if(!tb.connect(THINGSBOARD_MQTT_SERVER, THINGSBOARD_MQTT_ACESSTOKEN, THINGSBOARD_MQTT_PORT)) 
//       {
//       Serial.println("Failed to connect");
//       return;
//       }
//     }
// //------------------------------------------------------------------------------
//   // tb.sendTelemetryFloat("T1", SD40[0]);
//   // tb.sendTelemetryFloat("T2", BME6[0]); 
//   tb.sendTelemetryFloat("TEM_SCD40", SD40[0]);
//   tb.sendTelemetryFloat("HUM_SCD40", SD40[1]);
//   tb.sendTelemetryFloat("CO2_SCD40", S4CO);
//   tb.sendTelemetryFloat("TEM_BM680", BME6[0]); 
//   tb.sendTelemetryFloat("HUM_BM680", BME6[2]); 
//   tb.sendTelemetryFloat("PRE_BM680", BME6[1]); 
//   tb.sendTelemetryFloat("VOC_BM680", BME6[3]);
//   tb.sendTelemetryFloat("VOC_SGP40", raw);

//   tb.loop();
//   #endif
// //------------------------------------------------------------------------------
//   //intneo.fill(0xFF8000);
//   //intneo.show(); 
//   //digitalWrite(LED_ADV, LOW);
// //------------------------------------------------------------------------------  
// Serial.println( SD40[0]);
// Serial.println( SD40[1]);
// Serial.println( S4CO);
// Serial.println( SHT40[0]);
// Serial.println( SHT40[1]);
// // Serial.println( BME6[2]);
// // Serial.println( BME6[3]);
// // Serial.println(raw);
// Serial.println( SD40[1]);
// // Serial.println( BME6[1]);
// Serial.println( SD40[2]);
// // Serial.println( BME6[2]);
// //display.clearBuffer();
// }
// //==============================================================================
// void reconnect() 
// {                                                                               
// //------------------------------------------------------------------------------
// #if THI
//   status = WiFi.status();
//   if(status != WL_CONNECTED)
//     {
//     WiFi.begin(WIFISSID, PASSWORD);
//     while (WiFi.status() != WL_CONNECTED) 
//       {
//       delay(500);
//       Serial.print(".");
//       }
//     Serial.println(WiFi.localIP());
//     Serial.println("Connected to AP");
//     }
//     #endif
// }



